// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Release = exports.Release = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Header = exports.Header = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var StatusResponse = exports.StatusResponse = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineRelease()
defineHeader()
defineStatusResponse()

function defineRelease () {
  Release.encodingLength = encodingLength
  Release.encode = encode
  Release.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.version)) throw new Error("version is required")
    var len = encodings.string.encodingLength(obj.version)
    length += 1 + len
    if (defined(obj.description)) {
      var len = encodings.string.encodingLength(obj.description)
      length += 1 + len
    }
    if (defined(obj.diffLength)) {
      var len = encodings.varint.encodingLength(obj.diffLength)
      length += 1 + len
    }
    if (defined(obj.byteLength)) {
      var len = encodings.varint.encodingLength(obj.byteLength)
      length += 1 + len
    }
    if (defined(obj.chunks)) {
      var packedLen = 0
      for (var i = 0; i < obj.chunks.length; i++) {
        if (!defined(obj.chunks[i])) continue
        var len = encodings.varint.encodingLength(obj.chunks[i])
        packedLen += len
      }
      if (packedLen) {
        length += 1 + packedLen + varint.encodingLength(packedLen)
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.version)) throw new Error("version is required")
    buf[offset++] = 10
    encodings.string.encode(obj.version, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.description)) {
      buf[offset++] = 18
      encodings.string.encode(obj.description, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.diffLength)) {
      buf[offset++] = 24
      encodings.varint.encode(obj.diffLength, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.byteLength)) {
      buf[offset++] = 32
      encodings.varint.encode(obj.byteLength, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.chunks)) {
      var packedLen = 0
      for (var i = 0; i < obj.chunks.length; i++) {
        if (!defined(obj.chunks[i])) continue
        packedLen += encodings.varint.encodingLength(obj.chunks[i])
      }
      if (packedLen) {
        buf[offset++] = 42
        varint.encode(packedLen, buf, offset)
        offset += varint.encode.bytes
      }
      for (var i = 0; i < obj.chunks.length; i++) {
        if (!defined(obj.chunks[i])) continue
        encodings.varint.encode(obj.chunks[i], buf, offset)
        offset += encodings.varint.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      version: "",
      description: "",
      diffLength: 0,
      byteLength: 0,
      chunks: []
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.version = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        obj.description = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 3:
        obj.diffLength = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 4:
        obj.byteLength = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 5:
        var packedEnd = varint.decode(buf, offset)
        offset += varint.decode.bytes
        packedEnd += offset
        while (offset < packedEnd) {
          obj.chunks.push(encodings.varint.decode(buf, offset))
          offset += encodings.varint.decode.bytes
        }
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineHeader () {
  Header.encodingLength = encodingLength
  Header.encode = encode
  Header.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.protocol)) throw new Error("protocol is required")
    var len = encodings.string.encodingLength(obj.protocol)
    length += 1 + len
    if (!defined(obj.chunkFeed)) throw new Error("chunkFeed is required")
    var len = encodings.bytes.encodingLength(obj.chunkFeed)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.protocol)) throw new Error("protocol is required")
    buf[offset++] = 10
    encodings.string.encode(obj.protocol, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.chunkFeed)) throw new Error("chunkFeed is required")
    buf[offset++] = 18
    encodings.bytes.encode(obj.chunkFeed, buf, offset)
    offset += encodings.bytes.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      protocol: "",
      chunkFeed: null
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.protocol = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        obj.chunkFeed = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineStatusResponse () {
  StatusResponse.encodingLength = encodingLength
  StatusResponse.encode = encode
  StatusResponse.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.version)) throw new Error("version is required")
    var len = encodings.string.encodingLength(obj.version)
    length += 1 + len
    if (!defined(obj.latestRelease)) throw new Error("latestRelease is required")
    var len = Release.encodingLength(obj.latestRelease)
    length += varint.encodingLength(len)
    length += 1 + len
    if (!defined(obj.updateAvailable)) throw new Error("updateAvailable is required")
    var len = encodings.bool.encodingLength(obj.updateAvailable)
    length += 1 + len
    if (!defined(obj.updateDownloading)) throw new Error("updateDownloading is required")
    var len = encodings.bool.encodingLength(obj.updateDownloading)
    length += 1 + len
    if (!defined(obj.updateDownloaded)) throw new Error("updateDownloaded is required")
    var len = encodings.bool.encodingLength(obj.updateDownloaded)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.version)) throw new Error("version is required")
    buf[offset++] = 10
    encodings.string.encode(obj.version, buf, offset)
    offset += encodings.string.encode.bytes
    if (!defined(obj.latestRelease)) throw new Error("latestRelease is required")
    buf[offset++] = 18
    varint.encode(Release.encodingLength(obj.latestRelease), buf, offset)
    offset += varint.encode.bytes
    Release.encode(obj.latestRelease, buf, offset)
    offset += Release.encode.bytes
    if (!defined(obj.updateAvailable)) throw new Error("updateAvailable is required")
    buf[offset++] = 24
    encodings.bool.encode(obj.updateAvailable, buf, offset)
    offset += encodings.bool.encode.bytes
    if (!defined(obj.updateDownloading)) throw new Error("updateDownloading is required")
    buf[offset++] = 32
    encodings.bool.encode(obj.updateDownloading, buf, offset)
    offset += encodings.bool.encode.bytes
    if (!defined(obj.updateDownloaded)) throw new Error("updateDownloaded is required")
    buf[offset++] = 40
    encodings.bool.encode(obj.updateDownloaded, buf, offset)
    offset += encodings.bool.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      version: "",
      latestRelease: null,
      updateAvailable: false,
      updateDownloading: false,
      updateDownloaded: false
    }
    var found0 = false
    var found1 = false
    var found2 = false
    var found3 = false
    var found4 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2 || !found3 || !found4) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.version = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.latestRelease = Release.decode(buf, offset, offset + len)
        offset += Release.decode.bytes
        found1 = true
        break
        case 3:
        obj.updateAvailable = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        found2 = true
        break
        case 4:
        obj.updateDownloading = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        found3 = true
        break
        case 5:
        obj.updateDownloaded = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        found4 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
